[{"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 244, "new_lines": ["                    if (tais != null) {", "                        tais.getNextEntry();"]}], "deletions": [], "modifications": []}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 245, "new_lines": ["if (isTarArchive(in)) {", "    return new TarArchiveInputStream(in);", "} else {", "    throw new ArchiveException(\"Input stream is not a valid Tar archive\");", "}"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 245, "new_lines": ["if (isTarArchive(in)) {", "    return new TarArchiveInputStream(in);", "} else if (isZipArchive(in)) {", "    return new ZipArchiveInputStream(in);", "} else {", "    throw new ArchiveException(\"Input stream is not a valid archive\");", "}"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 245, "new_lines": ["if (isTarArchive(in)) {", "    return new TarArchiveInputStream(in);", "} else if (isZipArchive(in)) {", "    return new ZipArchiveInputStream(in);", "} else if (isJarArchive(in)) {", "    return new JarArchiveInputStream(in);", "} else {", "    throw new ArchiveException(\"Input stream is not a valid archive\");", "}"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 245, "new_lines": ["if (isTarArchive(in)) {", "    return new TarArchiveInputStream(in);", "} else if (isZipArchive(in)) {", "    return new ZipArchiveInputStream(in);", "} else if (isJarArchive(in)) {", "    return new JarArchiveInputStream(in);", "} else if (isCpioArchive(in)) {", "    return new CpioArchiveInputStream(in);", "} else {", "    throw new ArchiveException(\"Input stream is not a valid archive\");", "}"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 245, "new_lines": ["if (isTarArchive(in)) {", "    return new TarArchiveInputStream(in);", "} else if (isZipArchive(in)) {", "    return new ZipArchiveInputStream(in);", "} else if (isJarArchive(in)) {", "    return new JarArchiveInputStream(in);", "} else if (isCpioArchive(in)) {", "    return new CpioArchiveInputStream(in);", "} else if (isDumpArchive(in)) {", "    return new DumpArchiveInputStream(in);", "} else {", "    throw new ArchiveException(\"Input stream is not a valid archive\");", "}"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 245, "new_lines": ["if (isZipArchive(in)) {", "    return new ZipArchiveInputStream(in);", "} else {", "    throw new ArchiveException(\"Input stream is not a valid archive\");", "}"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 245, "new_lines": ["if (isJarArchive(in)) {", "    return new JarArchiveInputStream(in);", "} else {", "    throw new ArchiveException(\"Input stream is not a valid archive\");", "}"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 245, "new_lines": ["if (isCpioArchive(in)) {", "    return new CpioArchiveInputStream(in);", "} else {", "    throw new ArchiveException(\"Input stream is not a valid archive\");", "}"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 245, "new_lines": ["if (isDumpArchive(in)) {", "    return new DumpArchiveInputStream(in);", "} else {", "    throw new ArchiveException(\"Input stream is not a valid archive\");", "}"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 245, "new_lines": ["if (isZipArchive(in)) {", "    return new ZipArchiveInputStream(in);", "} else if (isJarArchive(in)) {", "    return new JarArchiveInputStream(in);", "} else {", "    throw new ArchiveException(\"Input stream is not a valid archive\");", "}"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 246, "new_lines": ["if (!TAR.equalsIgnoreCase(archiverName)) {", "    throw new ArchiveException(\"Input stream is not a valid Tar archive\");", "}"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 245, "new_lines": ["if (!TAR.equalsIgnoreCase(archiverName)) {", "    throw new ArchiveException(\"Input stream is not a valid Tar archive\");", "}"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 244, "new_lines": ["if (!TAR.equalsIgnoreCase(archiverName)) {", "    throw new ArchiveException(\"Input stream is not a valid Tar archive\");", "}"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 244, "new_lines": ["if (TAR.equalsIgnoreCase(archiverName)) {", "    return new TarArchiveInputStream(in);", "} else {", "    throw new ArchiveException(\"Input stream is not a valid Tar archive\");", "}"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 245, "new_lines": ["if (TAR.equalsIgnoreCase(archiverName)) {", "    return new TarArchiveInputStream(in);", "} else {", "    throw new ArchiveException(\"Input stream is not a valid Tar archive\");", "}"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 246, "new_lines": ["if (TAR.equalsIgnoreCase(archiverName)) {", "    return new TarArchiveInputStream(in);", "} else {", "    throw new ArchiveException(\"Input stream is not a valid Tar archive\");", "}"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 244, "new_lines": ["if (isTarArchive(in)) {", "    return new TarArchiveInputStream(in);", "} else {", "    throw new ArchiveException(\"Input stream is not a valid Tar archive\");", "}"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 245, "new_lines": ["if (isTarArchive(in)) {", "    return new TarArchiveInputStream(in);", "} else {", "    throw new ArchiveException(\"Input stream is not a valid Tar archive\");", "}"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 246, "new_lines": ["if (isTarArchive(in)) {", "    return new TarArchiveInputStream(in);", "} else {", "    throw new ArchiveException(\"Input stream is not a valid Tar archive\");", "}"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 245, "new_lines": ["if (TAR.equalsIgnoreCase(archiverName) && isTarArchive(in)) {", "    throw new ArchiveException(\"Input stream is a valid Tar archive\");", "}"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 245, "new_lines": ["if (TAR.equalsIgnoreCase(archiverName)) {", "    if (!isTarArchive(in)) {", "        throw new ArchiveException(\"Input stream is not a valid Tar archive\");", "    }", "}"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 245, "new_lines": ["if (TAR.equalsIgnoreCase(archiverName) && !isTarArchive(in)) {", "    throw new ArchiveException(\"Input stream is not a valid Tar archive\");", "}"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 245, "new_lines": ["if (TAR.equalsIgnoreCase(archiverName)) {", "    if (isTarArchive(in)) {", "        throw new ArchiveException(\"Input stream is a valid Tar archive\");", "    }", "}"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 245, "new_lines": ["if (TAR.equalsIgnoreCase(archiverName) && isTarArchive(in)) {", "    throw new ArchiveException(\"Input stream is a valid Tar archive\");", "}"]}, {"line_number": 246, "new_lines": ["return null;"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 245, "new_lines": ["if (!TAR.equalsIgnoreCase(archiverName) && !isTarArchive(in)) {", "    throw new ArchiveException(\"Input stream is not a valid Tar archive\");", "}"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 244, "new_lines": ["if (TAR.equalsIgnoreCase(archiverName) && isTarArchive(in)) {", "    throw new ArchiveException(\"Input stream is a valid Tar archive\");", "}"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 245, "new_lines": ["if (TAR.equalsIgnoreCase(archiverName) && !isTarArchive(in)) {", "    throw new ArchiveException(\"Input stream is not a valid Tar archive\");", "}"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 245, "new_lines": ["if (TAR.equalsIgnoreCase(archiverName) && isTarArchive(in)) {", "    throw new ArchiveException(\"Input stream is a valid Tar archive\");", "}"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 245, "new_lines": ["if (!TAR.equalsIgnoreCase(archiverName) && !isTarArchive(in)) {", "    throw new ArchiveException(\"Input stream is not a valid Tar archive\");", "}"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 245, "new_lines": ["if (!TAR.equalsIgnoreCase(archiverName)) {", "    throw new ArchiveException(\"Input stream is not a valid Tar archive\");", "}"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 245, "new_lines": ["if (TAR.equalsIgnoreCase(archiverName) && isTarArchive(in)) {", "    return new TarArchiveInputStream(in);", "} else {", "    throw new ArchiveException(\"Input stream is not a valid Tar archive\");", "}"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 245, "new_lines": ["if (TAR.equalsIgnoreCase(archiverName) && isTarArchive(in)) {", "    return new TarArchiveInputStream(in);", "} else if (TAR.equalsIgnoreCase(archiverName) && !isTarArchive(in)) {", "    throw new ArchiveException(\"Input stream is not a valid Tar archive\");", "}"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 245, "new_lines": ["if (TAR.equalsIgnoreCase(archiverName)) {", "    if (!isTarArchive(in)) {", "        throw new ArchiveException(\"Input stream is not a valid Tar archive\");", "    }", "} else {", "    throw new ArchiveException(\"Input stream is not a valid Tar archive\");", "}"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 245, "new_lines": ["if (!TAR.equalsIgnoreCase(archiverName) || !isTarArchive(in)) {", "    throw new ArchiveException(\"Input stream is not a valid Tar archive\");", "}"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 245, "new_lines": ["if (TAR.equalsIgnoreCase(archiverName)) {", "    if (!isTarArchive(in)) {", "        throw new ArchiveException(\"Input stream is not a valid Tar archive\");", "    }", "} else {", "    return new TarArchiveInputStream(in);", "}"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 245, "new_lines": ["if (TAR.equalsIgnoreCase(archiverName)) {", "    if (isTarArchive(in)) {", "        return new TarArchiveInputStream(in);", "    } else {", "        throw new ArchiveException(\"Input stream is not a valid Tar archive\");", "    }", "} else {", "    throw new ArchiveException(\"Input stream is not a valid Tar archive\");", "}"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 245, "new_lines": ["if (TAR.equalsIgnoreCase(archiverName)) {", "    if (!isTarArchive(in)) {", "        throw new ArchiveException(\"Input stream is not a valid Tar archive\");", "    } else {", "        return new TarArchiveInputStream(in);", "    }", "} else {", "    throw new ArchiveException(\"Input stream is not a valid Tar archive\");", "}"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 245, "new_lines": ["if (TAR.equalsIgnoreCase(archiverName) && !isTarArchive(in)) {", "throw new ArchiveException(\"Input stream is not a valid Tar archive\");"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 244, "new_lines": ["if (!TAR.equalsIgnoreCase(archiverName) || !isTarArchive(in)) {", "throw new ArchiveException(\"Input stream is not a valid Tar archive\");"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 245, "new_lines": ["if (!TAR.equalsIgnoreCase(archiverName) || !isTarArchive(in)) {", "throw new ArchiveException(\"Input stream is not a valid Tar archive\");"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 245, "new_lines": ["if (!TAR.equalsIgnoreCase(archiverName) && !isTarArchive(in)) {", "throw new ArchiveException(\"Input stream is not a valid Tar archive\");"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 244, "new_lines": ["if (TAR.equalsIgnoreCase(archiverName) || !isTarArchive(in)) {", "throw new ArchiveException(\"Input stream is not a valid Tar archive\");"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 244, "new_lines": ["if (TAR.equalsIgnoreCase(archiverName) && isTarArchive(in)) {", "return new TarArchiveInputStream(in);"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 245, "new_lines": ["if (TAR.equalsIgnoreCase(archiverName) && isTarArchive(in)) {", "return new TarArchiveInputStream(in);"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 244, "new_lines": ["if (!TAR.equalsIgnoreCase(archiverName) || isTarArchive(in)) {", "return new TarArchiveInputStream(in);"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 245, "new_lines": ["if (!TAR.equalsIgnoreCase(archiverName) || isTarArchive(in)) {", "return new TarArchiveInputStream(in);"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 246, "new_lines": ["throw new ArchiveException(\"Input stream is not a valid archive format\");"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 244, "new_lines": ["if (!TAR.equalsIgnoreCase(archiverName) && !isTarArchive(in)) {", "throw new ArchiveException(\"Input stream is not a valid Tar archive\");"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 244, "new_lines": ["if (!TAR.equalsIgnoreCase(archiverName) && isTarArchive(in)) {", "throw new ArchiveException(\"Input stream is not a valid Tar archive\");"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 245, "new_lines": ["if (!TAR.equalsIgnoreCase(archiverName) && isTarArchive(in)) {", "throw new ArchiveException(\"Input stream is not a valid Tar archive\");"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 245, "new_lines": ["if (TAR.equalsIgnoreCase(archiverName) || !isTarArchive(in)) {", "throw new ArchiveException(\"Input stream is not a valid Tar archive\");"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 244, "new_lines": ["if (TAR.equalsIgnoreCase(archiverName) || isTarArchive(in)) {", "throw new ArchiveException(\"Input stream is not a valid Tar archive\");"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 246, "new_lines": ["if (TAR.equalsIgnoreCase(archiverName) && !isTarArchive(in)) {", "throw new ArchiveException(\"Input stream is not a valid Tar archive\");"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 246, "new_lines": ["if (!TAR.equalsIgnoreCase(archiverName) || isTarArchive(in)) {", "throw new ArchiveException(\"Input stream is not a valid Tar archive\");"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 244, "new_lines": ["if (!TAR.equalsIgnoreCase(archiverName) || !isTarArchive(in)) {", "throw new ArchiveException(\"Input stream is not a valid Tar archive\");"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 245, "new_lines": ["if (!TAR.equalsIgnoreCase(archiverName) && !isTarArchive(in)) {", "throw new ArchiveException(\"Input stream is not a valid Tar archive\");"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 246, "new_lines": ["throw new ArchiveException(\"Input stream is not a valid archive format\");"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 244, "new_lines": ["if (TAR.equalsIgnoreCase(archiverName) && isTarArchive(in)) {", "throw new ArchiveException(\"Input stream is not a valid Tar archive\");"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 245, "new_lines": ["if (TAR.equalsIgnoreCase(archiverName) && isTarArchive(in)) {", "throw new ArchiveException(\"Input stream is not a valid Tar archive\");"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 246, "new_lines": ["if (!TAR.equalsIgnoreCase(archiverName) && !isTarArchive(in)) {", "throw new ArchiveException(\"Input stream is not a valid archive format\");"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 244, "new_lines": ["if (!TAR.equalsIgnoreCase(archiverName) || isTarArchive(in)) {", "throw new ArchiveException(\"Input stream is not a valid archive format\");"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 245, "new_lines": ["if (!TAR.equalsIgnoreCase(archiverName) || isTarArchive(in)) {", "throw new ArchiveException(\"Input stream is not a valid archive format\");"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 246, "new_lines": ["if (TAR.equalsIgnoreCase(archiverName) || !isTarArchive(in)) {", "throw new ArchiveException(\"Input stream is not a valid archive format\");"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 244, "new_lines": ["if (TAR.equalsIgnoreCase(archiverName) || !isTarArchive(in)) {", "throw new ArchiveException(\"Input stream is not a valid archive format\");"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 245, "new_lines": ["if (TAR.equalsIgnoreCase(archiverName) || !isTarArchive(in)) {", "throw new ArchiveException(\"Input stream is not a valid archive format\");"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 244, "new_lines": ["if (!TAR.equalsIgnoreCase(archiverName)) {", "    throw new ArchiveException(\"Input stream is not a valid Tar archive\");", "}"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 244, "new_lines": ["if (TAR.equalsIgnoreCase(archiverName)) {", "    return new TarArchiveInputStream(in);", "} else {", "    throw new ArchiveException(\"Input stream is not a valid Tar archive\");", "}"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 244, "new_lines": ["if (TAR.equalsIgnoreCase(archiverName)) {", "    throw new ArchiveException(\"Input stream is not a valid Tar archive\");", "} else {", "    return new TarArchiveInputStream(in);", "}"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 244, "new_lines": ["if (TAR.equalsIgnoreCase(archiverName)) {", "    throw new ArchiveException(\"Input stream is not a valid Tar archive\");", "} else if (ZIP.equalsIgnoreCase(archiverName)) {", "    return new ZipArchiveInputStream(in);", "} else if (JAR.equalsIgnoreCase(archiverName)) {", "    return new JarArchiveInputStream(in);", "} else {", "    return new ArchiveInputStream(in);", "}"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 244, "new_lines": ["if (TAR.equalsIgnoreCase(archiverName)) {", "    return new TarArchiveInputStream(in);", "} else if (ZIP.equalsIgnoreCase(archiverName)) {", "    return new ZipArchiveInputStream(in);", "} else {", "    throw new ArchiveException(\"Input stream is not a valid format\");", "}"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 244, "new_lines": ["if (!TAR.equalsIgnoreCase(archiverName)) {", "    throw new ArchiveException(\"Input stream is not a valid Tar archive\");", "} else {", "    return new TarArchiveInputStream(in);", "}"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 244, "new_lines": ["if (TAR.equalsIgnoreCase(archiverName)) {", "    return new TarArchiveInputStream(in);", "} else if (ZIP.equalsIgnoreCase(archiverName)) {", "    return new ZipArchiveInputStream(in);", "} else if (JAR.equalsIgnoreCase(archiverName)) {", "    return new JarArchiveInputStream(in);", "} else {", "    throw new ArchiveException(\"Unknown archive format\");", "}"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 244, "new_lines": ["if (!TAR.equalsIgnoreCase(archiverName)) {", "    throw new ArchiveException(\"Input stream is not a valid Tar archive\");", "} else if (ZIP.equalsIgnoreCase(archiverName)) {", "    return new ZipArchiveInputStream(in);", "} else {", "    return new ArchiveInputStream(in);", "}"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 244, "new_lines": ["if (TAR.equalsIgnoreCase(archiverName)) {", "    return new TarArchiveInputStream(in);", "} else {", "    throw new ArchiveException(\"Invalid archive format\");", "}"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 244, "new_lines": ["if (!TAR.equalsIgnoreCase(archiverName)) {", "    throw new ArchiveException(\"Input stream is not a valid Tar archive\");", "} else {", "    return new TarArchiveInputStream(in);", "}"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 244, "new_lines": ["if (!isTarArchive(in)) {", "    throw new ArchiveException(\"Input stream is not a valid Tar archive\");", "}"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 244, "new_lines": ["if (TAR.equalsIgnoreCase(archiverName) && !isTarArchive(in)) {", "    throw new ArchiveException(\"Input stream is not a valid Tar archive\");", "}"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 244, "new_lines": ["if (TAR.equalsIgnoreCase(archiverName) && !isTarArchive(in)) {", "    throw new ArchiveException(\"Input stream is not a valid Tar archive\");", "}"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 244, "new_lines": ["if (TAR.equalsIgnoreCase(archiverName) && !isTarArchive(in)) {", "    throw new ArchiveException(\"Input stream is not a valid Tar archive\");", "}"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 244, "new_lines": ["if (!TAR.equalsIgnoreCase(archiverName) && !isTarArchive(in)) {", "    throw new ArchiveException(\"Input stream is not a valid Tar archive\");", "}"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 244, "new_lines": ["if (!isTarArchive(in) && TAR.equalsIgnoreCase(archiverName)) {", "    throw new ArchiveException(\"Input stream is not a valid Tar archive\");", "}"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 244, "new_lines": ["if (TAR.equalsIgnoreCase(archiverName) || !isTarArchive(in)) {", "    throw new ArchiveException(\"Input stream is not a valid Tar archive\");", "}"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 244, "new_lines": ["if (TAR.equalsIgnoreCase(archiverName) && isTarArchive(in)) {", "    return new TarArchiveInputStream(in);", "}"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 244, "new_lines": ["if (TAR.equalsIgnoreCase(archiverName) && !isTarArchive(in)) {", "    throw new ArchiveException(\"Input stream is not a valid Tar archive\");", "}"]}, {"line_number": 245, "new_lines": ["return new TarArchiveInputStream(in);"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 246, "new_lines": ["throw new ArchiveException(\"Error creating TarArchiveInputStream\");"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 244, "new_lines": ["if (TAR.equalsIgnoreCase(archiverName) && !isTarArchive(in)) {", "    throw new ArchiveException(\"Input stream is not a valid Tar archive\");", "}"]}, {"line_number": 245, "new_lines": ["return new TarArchiveInputStream(in);"]}, {"line_number": 246, "new_lines": ["throw new ArchiveException(\"Error creating TarArchiveInputStream\");"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 244, "new_lines": ["// Do something here to handle non-TAR archives"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 245, "new_lines": ["// Add a check for non-TAR archives here"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 246, "new_lines": ["// Handle non-TAR archives differently"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 244, "new_lines": ["if (TAR.equalsIgnoreCase(archiverName) && !isTarArchive(in)) {", "    throw new ArchiveException(\"Input stream is not a valid Tar archive\");", "}"]}, {"line_number": 246, "new_lines": ["throw new ArchiveException(\"Error creating TarArchiveInputStream\");"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 244, "new_lines": ["if (TAR.equalsIgnoreCase(archiverName) && !isTarArchive(in)) {", "    throw new ArchiveException(\"Input stream is not a valid Tar archive\");", "}"]}, {"line_number": 245, "new_lines": ["return new TarArchiveInputStream(in);"]}, {"line_number": 246, "new_lines": ["// Additional handling for non-TAR archives"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 244, "new_lines": ["// Check for non-TAR archives"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 245, "new_lines": ["// Handle non-TAR archives here"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 246, "new_lines": ["// Special treatment for non-TAR archives"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 244, "new_lines": ["if (TAR.equalsIgnoreCase(archiverName) && !isTarArchive(in)) {", "    throw new ArchiveException(\"Input stream is not a valid Tar archive\");", "}"]}, {"line_number": 245, "new_lines": ["return new TarArchiveInputStream(in);"]}, {"line_number": 246, "new_lines": ["// Add logic to handle non-TAR archives"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 244, "new_lines": ["// Handle non-TAR archives differently"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 245, "new_lines": ["// Implement handling for non-TAR archives"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 246, "new_lines": ["// Deal with non-TAR archives here"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 244, "new_lines": ["if (TAR.equalsIgnoreCase(archiverName) && !isTarArchive(in)) {", "    throw new ArchiveException(\"Input stream is not a valid Tar archive\");", "}"]}, {"line_number": 245, "new_lines": ["return new TarArchiveInputStream(in);"]}, {"line_number": 246, "new_lines": ["// Handle non-TAR archives in a specific way"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 244, "new_lines": ["// Add logic for non-TAR archives"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 245, "new_lines": ["// Special case for non-TAR archives"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 246, "new_lines": ["// Custom handling for non-TAR archives"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 244, "new_lines": ["if (!isTarArchive(in)) {", "throw new ArchiveException(\"Input stream is not a valid Tar archive\");"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 244, "new_lines": ["if (!TAR.equalsIgnoreCase(archiverName) && !isTarArchive(in)) {", "throw new ArchiveException(\"Input stream is not a valid Tar archive\");"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 244, "new_lines": ["if (!TAR.equalsIgnoreCase(archiverName) || !isTarArchive(in)) {", "throw new ArchiveException(\"Input stream is not a valid Tar archive\");"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 244, "new_lines": ["if (TAR.equalsIgnoreCase(archiverName) && isTarArchive(in)) {", "throw new ArchiveException(\"Input stream is a valid Tar archive\");"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 245, "new_lines": ["if (TAR.equalsIgnoreCase(archiverName) && !isTarArchive(in)) {", "throw new ArchiveException(\"Input stream is not a valid Tar archive\");"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 245, "new_lines": ["if (!TAR.equalsIgnoreCase(archiverName) && isTarArchive(in)) {", "throw new ArchiveException(\"Input stream is a valid Tar archive\");"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 245, "new_lines": ["if (!TAR.equalsIgnoreCase(archiverName) || isTarArchive(in)) {", "throw new ArchiveException(\"Input stream is a valid Tar archive\");"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 244, "new_lines": ["if (TAR.equalsIgnoreCase(archiverName) || isTarArchive(in)) {", "throw new ArchiveException(\"Input stream is a valid Tar archive\");"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 246, "new_lines": ["// Add a log statement here for debugging purposes"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 246, "new_lines": ["// Potential fix for the issue reported in the test case"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 245, "new_lines": ["if (TAR.equalsIgnoreCase(archiverName) && in != null) {", "throw new ArchiveException(\"Input stream is not null and is a valid Tar archive\");"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 245, "new_lines": ["if (TAR.equalsIgnoreCase(archiverName) && in == null) {", "throw new ArchiveException(\"Input stream is null and should not be for a Tar archive\");"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 244, "new_lines": ["if (TAR.equalsIgnoreCase(archiverName) && in != null) {", "throw new ArchiveException(\"Input stream is not null and is a valid Tar archive\");"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 244, "new_lines": ["if (TAR.equalsIgnoreCase(archiverName) && in == null) {", "throw new ArchiveException(\"Input stream is null and should not be for a Tar archive\");"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 245, "new_lines": ["if (!TAR.equalsIgnoreCase(archiverName) && in != null) {", "throw new ArchiveException(\"Input stream is not null and is not a Tar archive\");"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 245, "new_lines": ["if (!TAR.equalsIgnoreCase(archiverName) && in == null) {", "throw new ArchiveException(\"Input stream is null and should not be for a non-Tar archive\");"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 244, "new_lines": ["if (!TAR.equalsIgnoreCase(archiverName) && in != null) {", "throw new ArchiveException(\"Input stream is not null and is not a Tar archive\");"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 244, "new_lines": ["if (!TAR.equalsIgnoreCase(archiverName) && in == null) {", "throw new ArchiveException(\"Input stream is null and should not be for a non-Tar archive\");"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 246, "new_lines": ["// Add a fix for the reported issue in the test case"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 246, "new_lines": ["// Consider logging additional information here for debugging"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 246, "new_lines": ["// Uncomment the following line to fix the issue"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 246, "new_lines": ["// Potential fix for the reported issue in the test case"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 245, "new_lines": ["if (TAR.equalsIgnoreCase(archiverName) && in != null) {", "throw new ArchiveException(\"Input stream is not null and is a valid Tar archive\");"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 245, "new_lines": ["if (TAR.equalsIgnoreCase(archiverName) && in == null) {", "throw new ArchiveException(\"Input stream is null and should not be for a Tar archive\");"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 244, "new_lines": ["if (TAR.equalsIgnoreCase(archiverName) && in != null) {", "throw new ArchiveException(\"Input stream is not null and is a valid Tar archive\");"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 244, "new_lines": ["if (TAR.equalsIgnoreCase(archiverName) && in == null) {", "throw new ArchiveException(\"Input stream is null and should not be for a Tar archive\");"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 245, "new_lines": ["if (!TAR.equalsIgnoreCase(archiverName) && in != null) {", "throw new ArchiveException(\"Input stream is not null and is not a Tar archive\");"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 245, "new_lines": ["if (!TAR.equalsIgnoreCase(archiverName) && in == null) {", "throw new ArchiveException(\"Input stream is null and should not be for a non-Tar archive\");"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 244, "new_lines": ["if (!TAR.equalsIgnoreCase(archiverName) && in != null) {", "throw new ArchiveException(\"Input stream is not null and is not a Tar archive\");"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 244, "new_lines": ["if (!TAR.equalsIgnoreCase(archiverName) && in == null) {", "throw new ArchiveException(\"Input stream is null and should not be for a non-Tar archive\");"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 245, "new_lines": ["if (TAR.equalsIgnoreCase(archiverName) && !isTarArchive(in)) {", "    throw new ArchiveException(\"Input stream is not a valid Tar archive\");", "}"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 244, "new_lines": ["if (TAR.equalsIgnoreCase(archiverName) && !isTarArchive(in)) {", "    throw new ArchiveException(\"Input stream is not a valid Tar archive\");"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 245, "new_lines": ["if (TAR.equalsIgnoreCase(archiverName) && !isTarArchive(in)) {", "    throw new ArchiveException(\"Input stream is not a valid Tar archive\");"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 245, "new_lines": ["if (TAR.equalsIgnoreCase(archiverName) && !isTarArchive(in)) {", "    throw new ArchiveException(\"Input stream is not a valid Tar archive\");"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 244, "new_lines": ["if (TAR.equalsIgnoreCase(archiverName) && !isTarArchive(in)) {", "    throw new ArchiveException(\"Input stream is not a valid Tar archive\");"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 244, "new_lines": ["if (TAR.equalsIgnoreCase(archiverName) && !isTarArchive(in)) {", "    throw new ArchiveException(\"Input stream is not a valid Tar archive\");"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 244, "new_lines": ["if (TAR.equalsIgnoreCase(archiverName) && !isTarArchive(in)) {", "    throw new ArchiveException(\"Input stream is not a valid Tar archive\");"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 244, "new_lines": ["if (TAR.equalsIgnoreCase(archiverName) && !isTarArchive(in)) {", "    throw new ArchiveException(\"Input stream is not a valid Tar archive\");"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 244, "new_lines": ["if (TAR.equalsIgnoreCase(archiverName) && !isTarArchive(in)) {", "    throw new ArchiveException(\"Input stream is not a valid Tar archive\");"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 244, "new_lines": ["if (TAR.equalsIgnoreCase(archiverName) && !isTarArchive(in)) {", "    throw new ArchiveException(\"Input stream is not a valid Tar archive\");"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 244, "new_lines": ["if (TAR.equalsIgnoreCase(archiverName) && !isTarArchive(in)) {", "    throw new ArchiveException(\"Input stream is not a valid Tar archive\");"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 245, "new_lines": ["if (TAR.equalsIgnoreCase(archiverName) && !isTarArchive(in)) {", "    throw new ArchiveException(\"Input stream is not a valid Tar archive\");"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 245, "new_lines": ["if (TAR.equalsIgnoreCase(archiverName) && !isTarArchive(in)) {", "    throw new ArchiveException(\"Input stream is not a valid Tar archive\");"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 245, "new_lines": ["if (TAR.equalsIgnoreCase(archiverName) && !isTarArchive(in)) {", "    throw new ArchiveException(\"Input stream is not a valid Tar archive\");"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 245, "new_lines": ["if (TAR.equalsIgnoreCase(archiverName) && !isTarArchive(in)) {", "    throw new ArchiveException(\"Input stream is not a valid Tar archive\");"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 244, "new_lines": ["if (TAR.equalsIgnoreCase(archiverName) && !isTarArchive(in)) {", "    throw new ArchiveException(\"Input stream is not a valid Tar archive\");"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 244, "new_lines": ["if (TAR.equalsIgnoreCase(archiverName) && !isTarArchive(in)) {", "    throw new ArchiveException(\"Input stream is not a valid Tar archive\");"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 244, "new_lines": ["if (TAR.equalsIgnoreCase(archiverName) && !isTarArchive(in)) {", "    throw new ArchiveException(\"Input stream is not a valid Tar archive\");"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 244, "new_lines": ["if (TAR.equalsIgnoreCase(archiverName) && !isTarArchive(in)) {", "    throw new ArchiveException(\"Input stream is not a valid Tar archive\");"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 244, "new_lines": ["if (TAR.equalsIgnoreCase(archiverName) && !isTarArchive(in)) {", "    throw new ArchiveException(\"Input stream is not a valid Tar archive\");", "}"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 244, "new_lines": ["if (TAR.equalsIgnoreCase(archiverName) && !TarArchiveInputStream.matches(in)) {", "    throw new ArchiveException(\"Input stream is not a valid Tar archive\");", "}"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 245, "new_lines": ["if (!TAR.equalsIgnoreCase(archiverName) || !isTarArchive(in)) {", "    throw new ArchiveException(\"Input stream is not a valid Tar archive\");", "}"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 245, "new_lines": ["if (TAR.equalsIgnoreCase(archiverName) && !isTarArchive(in)) {", "    throw new ArchiveException(\"Input stream is not a valid Tar archive\");", "}"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 244, "new_lines": ["if (TAR.equalsIgnoreCase(archiverName) && !isTarArchive(in)) {", "    throw new ArchiveException(\"Input stream is not a valid Tar archive\");", "}"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 244, "new_lines": ["if (TAR.equalsIgnoreCase(archiverName) && !isTarArchive(in)) {", "    throw new ArchiveException(\"Input stream is not a valid Tar archive\");", "}"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 244, "new_lines": ["if (TAR.equalsIgnoreCase(archiverName) && !isTarArchive(in)) {", "    throw new ArchiveException(\"Input stream is not a valid Tar archive\");", "}"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 245, "new_lines": ["if (TAR.equalsIgnoreCase(archiverName) && !isTarArchive(in)) {", "    throw new ArchiveException(\"Input stream is not a valid Tar archive\");", "}"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 245, "new_lines": ["if (!TAR.equalsIgnoreCase(archiverName) || !isTarArchive(in)) {", "    throw new ArchiveException(\"Input stream is not a valid Tar archive\");", "}"]}]}, {"file_name": "org/apache/commons/compress/archivers/ArchiveStreamFactory.java", "insertions": [{"line_number": 244, "new_lines": ["if (!TAR.equalsIgnoreCase(archiverName) || !isTarArchive(in)) {", "    throw new ArchiveException(\"Input stream is not a valid Tar archive\");", "}"]}]}]