[{"file_name": "com/google/javascript/jscomp/ProcessCommonJSModules.java", "insertions": [{"line_number": 119, "new_lines": ["    private static final String MODULE_NAME_SEPARATOR = \"/\";"]}], "deletions": [], "modifications": [{"line_number": 183, "modified_line": "      String moduleName = guessCJSModuleName(normalizeSourceName(script.getSourceFileName())); // Modify the logic for finding wrap position and padding text here to address the bug"}]}, {"file_name": "com/google/javascript/jscomp/ProcessCommonJSModules.java", "insertions": [], "deletions": [], "modifications": [{"line_number": 183, "modified_line": "      String moduleName = guessCJSModuleName(normalizeSourceName(script.getSourceFileName().replace(\"\\\\\", \"/\"))); // Handle backslashes in filenames correctly"}]}, {"file_name": "com/google/javascript/jscomp/ProcessCommonJSModules.java", "insertions": [], "deletions": [], "modifications": [{"line_number": 183, "modified_line": "      String moduleName = guessCJSModuleName(normalizeSourceName(script.getSourceFileName().replace(\"\\\\\", \"\"))); // Handle backslashes in filenames correctly"}]}, {"file_name": "com/google/javascript/jscomp/ProcessCommonJSModules.java", "insertions": [], "deletions": [], "modifications": [{"line_number": 183, "modified_line": "      String moduleName = guessCJSModuleName(normalizeSourceName(script.getSourceFileName().replace(\"/\", \"\\\\\"))); // Handle backslashes in filenames correctly"}]}, {"file_name": "com/google/javascript/jscomp/ProcessCommonJSModules.java", "insertions": [], "deletions": [], "modifications": [{"line_number": 183, "modified_line": "      String moduleName = guessCJSModuleName(normalizeSourceName(script.getSourceFileName().replace(\"/\", \"/\"))); // Handle backslashes in filenames correctly"}]}, {"file_name": "com/google/javascript/jscomp/ProcessCommonJSModules.java", "insertions": [], "deletions": [], "modifications": [{"line_number": 183, "modified_line": "      String moduleName = guessCJSModuleName(normalizeSourceName(script.getSourceFileName().replace(\"\\\", \"/\"))); // Handle backslashes in filenames correctly"}]}, {"file_name": "com/google/javascript/jscomp/ProcessCommonJSModules.java", "insertions": [], "deletions": [], "modifications": [{"line_number": 183, "modified_line": "      String moduleName = guessCJSModuleName(normalizeSourceName(script.getSourceFileName().replace(\"\\\\\", \"\\\\\\\\\"))); // Handle backslashes in filenames correctly"}]}, {"file_name": "com/google/javascript/jscomp/ProcessCommonJSModules.java", "insertions": [], "deletions": [], "modifications": [{"line_number": 183, "modified_line": "      String moduleName = guessCJSModuleName(normalizeSourceName(script.getSourceFileName().replace(\"\\\\\", \"\\\\\"))); // Handle backslashes in filenames correctly"}]}, {"file_name": "com/google/javascript/jscomp/ProcessCommonJSModules.java", "insertions": [], "deletions": [], "modifications": [{"line_number": 183, "modified_line": "      String moduleName = guessCJSModuleName(normalizeSourceName(script.getSourceFileName().replace(\"/\", \"\"))); // Handle backslashes in filenames correctly"}]}, {"file_name": "com/google/javascript/jscomp/ProcessCommonJSModules.java", "insertions": [], "deletions": [], "modifications": [{"line_number": 183, "modified_line": "      String moduleName = guessCJSModuleName(normalizeSourceName(script.getSourceFileName().replace(\"\\\\\", \"\"))); // Handle backslashes in filenames correctly"}]}, {"file_name": "com/google/javascript/jscomp/ProcessCommonJSModules.java", "insertions": [], "deletions": [], "modifications": [{"line_number": 183, "modified_line": "      String moduleName = guessCJSModuleName(normalizeSourceName(script.getSourceFileName().replace(\"/\", \"/\"))); // Handle backslashes in filenames correctly"}]}, {"file_name": "com/google/javascript/jscomp/ProcessCommonJSModules.java", "insertions": [], "deletions": [], "modifications": [{"line_number": 183, "modified_line": "      String moduleName = guessCJSModuleName(normalizeSourceName(script.getSourceFileName().replace(\"\\\", \"/\"))); // Handle backslashes in filenames correctly"}]}, {"file_name": "com/google/javascript/jscomp/ProcessCommonJSModules.java", "insertions": [], "deletions": [], "modifications": [{"line_number": 183, "modified_line": "      String moduleName = guessCJSModuleName(normalizeSourceName(script.getSourceFileName().replace(\"\\\\\", \"\\\\\\\\\"))); // Handle backslashes in filenames correctly"}]}, {"file_name": "com/google/javascript/jscomp/ProcessCommonJSModules.java", "insertions": [], "deletions": [], "modifications": [{"line_number": 183, "modified_line": "      String moduleName = guessCJSModuleName(normalizeSourceName(script.getSourceFileName().replace(\"\\\\\", \"/\"))); // Handle backslashes in filenames correctly"}]}, {"file_name": "com/google/javascript/jscomp/ProcessCommonJSModules.java", "insertions": [], "deletions": [], "modifications": [{"line_number": 183, "modified_line": "      String moduleName = guessCJSModuleName(normalizeSourceName(script.getSourceFileName().replace(\"/\", \"\"))); // Handle backslashes in filenames correctly"}]}, {"file_name": "com/google/javascript/jscomp/ProcessCommonJSModules.java", "insertions": [], "deletions": [], "modifications": [{"line_number": 183, "modified_line": "      String moduleName = guessCJSModuleName(normalizeSourceName(script.getSourceFileName().replace(\"\\\\\", \"\"))); // Handle backslashes in filenames correctly"}]}, {"file_name": "com/google/javascript/jscomp/ProcessCommonJSModules.java", "insertions": [], "deletions": [], "modifications": [{"line_number": 183, "modified_line": "      String moduleName = guessCJSModuleName(normalizeSourceName(script.getSourceFileName().replace(\"/\", \"/\"))); // Handle backslashes in filenames correctly"}]}, {"file_name": "com/google/javascript/jscomp/ProcessCommonJSModules.java", "insertions": [], "deletions": [], "modifications": [{"line_number": 183, "modified_line": "      String moduleName = guessCJSModuleName(normalizeSourceName(script.getSourceFileName().replace(\"\\\", \"/\"))); // Handle backslashes in filenames correctly"}]}, {"file_name": "com/google/javascript/jscomp/ProcessCommonJSModules.java", "insertions": [], "deletions": [], "modifications": [{"line_number": 183, "modified_line": "      String moduleName = guessCJSModuleName(normalizeSourceName(script.getSourceFileName().replace(\"\\\\\", \"\\\\\\\\\"))); // Handle backslashes in filenames correctly"}]}, {"file_name": "com/google/javascript/jscomp/ProcessCommonJSModules.java", "modifications": [{"line_number": 183, "modified_line": "      String moduleName = guessCJSModuleName(normalizeSourceName(script.getSourceFileName().replace(\"foo\\\\\", \"/\")); // Handle backslashes in filenames correctly"}, {"line_number": 119, "modified_line": "    return MODULE_NAME_PREFIX + filename.replaceAll(\"^\\\\.\" + Pattern.quote(MODULE_SLASH), \"\")\n            .replaceAll(Pattern.quote(MODULE_SLASH), MODULE_NAME_SEPARATOR)\n            .replaceAll(\"\\\\.js$\", \"\").replaceAll(\"-\", \"_\"); // Handle backslashes in filenames correctly"}]}, {"file_name": "com/google/javascript/jscomp/ProcessCommonJSModules.java", "modifications": [{"line_number": 183, "modified_line": "      String moduleName = guessCJSModuleName(normalizeSourceName(script.getSourceFileName().replace(\"foo\\\\\", \"\")); // Handle backslashes in filenames correctly"}, {"line_number": 119, "modified_line": "    return MODULE_NAME_PREFIX + filename.replaceAll(\"^\\\\.\" + Pattern.quote(MODULE_SLASH), \"\")\n            .replaceAll(Pattern.quote(MODULE_SLASH), MODULE_NAME_SEPARATOR)\n            .replaceAll(\"\\\\.js$\", \"\").replaceAll(\"-\", \"_\"); // Handle backslashes in filenames correctly"}]}, {"file_name": "com/google/javascript/jscomp/ProcessCommonJSModules.java", "modifications": [{"line_number": 183, "modified_line": "      String moduleName = guessCJSModuleName(normalizeSourceName(script.getSourceFileName().replace(\"foo\\\\\", \"bar/\")); // Handle backslashes in filenames correctly"}, {"line_number": 119, "modified_line": "    return MODULE_NAME_PREFIX + filename.replaceAll(\"^\\\\.\" + Pattern.quote(MODULE_SLASH), \"\")\n            .replaceAll(Pattern.quote(MODULE_SLASH), MODULE_NAME_SEPARATOR)\n            .replaceAll(\"\\\\.js$\", \"\").replaceAll(\"-\", \"_\"); // Handle backslashes in filenames correctly"}]}, {"file_name": "com/google/javascript/jscomp/ProcessCommonJSModules.java", "modifications": [{"line_number": 183, "modified_line": "      String moduleName = guessCJSModuleName(normalizeSourceName(script.getSourceFileName().replace(\"foo\\\\\", \"bar\\\\\")); // Handle backslashes in filenames correctly"}, {"line_number": 119, "modified_line": "    return MODULE_NAME_PREFIX + filename.replaceAll(\"^\\\\.\" + Pattern.quote(MODULE_SLASH), \"\")\n            .replaceAll(Pattern.quote(MODULE_SLASH), MODULE_NAME_SEPARATOR)\n            .replaceAll(\"\\\\.js$\", \"\").replaceAll(\"-\", \"_\"); // Handle backslashes in filenames correctly"}]}, {"file_name": "com/google/javascript/jscomp/ProcessCommonJSModules.java", "modifications": [{"line_number": 183, "modified_line": "      String moduleName = guessCJSModuleName(normalizeSourceName(script.getSourceFileName().replace(\"foo\\\\\", \"bar\\\\\")); // Fix backslashes in filenames"}, {"line_number": 119, "modified_line": "    return MODULE_NAME_PREFIX + filename.replaceAll(\"^\\\\.\" + Pattern.quote(MODULE_SLASH), \"\")\n            .replaceAll(Pattern.quote(MODULE_SLASH), MODULE_NAME_SEPARATOR)\n            .replaceAll(\"\\\\.js$\", \"\").replaceAll(\"-\", \"_\"); // Handle backslashes in filenames correctly"}]}, {"file_name": "com/google/javascript/jscomp/ProcessCommonJSModules.java", "modifications": [{"line_number": 183, "modified_line": "      String moduleName = guessCJSModuleName(normalizeSourceName(script.getSourceFileName().replace(\"foo\\\\\", \"\")); // Fix backslashes in filenames"}, {"line_number": 119, "modified_line": "    return MODULE_NAME_PREFIX + filename.replaceAll(\"^\\\\.\" + Pattern.quote(MODULE_SLASH), \"\")\n            .replaceAll(Pattern.quote(MODULE_SLASH), MODULE_NAME_SEPARATOR)\n            .replaceAll(\"\\\\.js$\", \"\").replaceAll(\"-\", \"_\"); // Handle backslashes in filenames correctly"}]}, {"file_name": "com/google/javascript/jscomp/ProcessCommonJSModules.java", "modifications": [{"line_number": 183, "modified_line": "      String moduleName = guessCJSModuleName(normalizeSourceName(script.getSourceFileName().replace(\"foo\\\\\", \"/\")); // Fix backslashes in filenames"}, {"line_number": 119, "modified_line": "    return MODULE_NAME_PREFIX + filename.replaceAll(\"^\\\\.\" + Pattern.quote(MODULE_SLASH), \"\")\n            .replaceAll(Pattern.quote(MODULE_SLASH), MODULE_NAME_SEPARATOR)\n            .replaceAll(\"\\\\.js$\", \"\").replaceAll(\"-\", \"_\"); // Handle backslashes in filenames correctly"}]}, {"file_name": "com/google/javascript/jscomp/ProcessCommonJSModules.java", "modifications": [{"line_number": 183, "modified_line": "      String moduleName = guessCJSModuleName(normalizeSourceName(script.getSourceFileName().replace(\"foo\\\\\", \"bar\\\\\")); // Fix backslashes in filenames"}, {"line_number": 119, "modified_line": "    return MODULE_NAME_PREFIX + filename.replaceAll(\"^\\\\.\" + Pattern.quote(MODULE_SLASH), \"\")\n            .replaceAll(Pattern.quote(MODULE_SLASH), MODULE_NAME_SEPARATOR)\n            .replaceAll(\"\\\\.js$\", \"\").replaceAll(\"-\", \"_\"); // Handle backslashes in filenames correctly"}]}, {"file_name": "com/google/javascript/jscomp/ProcessCommonJSModules.java", "modifications": [{"line_number": 183, "modified_line": "      String moduleName = guessCJSModuleName(normalizeSourceName(script.getSourceFileName().replace(\"foo\\\\\", \"/\")); // Fix backslashes in filenames"}, {"line_number": 119, "modified_line": "    return MODULE_NAME_PREFIX + filename.replaceAll(\"^\\\\.\" + Pattern.quote(MODULE_SLASH), \"\")\n            .replaceAll(Pattern.quote(MODULE_SLASH), MODULE_NAME_SEPARATOR)\n            .replaceAll(\"\\\\.js$\", \"\").replaceAll(\"-\", \"_\"); // Fix backslashes in filenames"}]}, {"file_name": "com/google/javascript/jscomp/ProcessCommonJSModules.java", "modifications": [{"line_number": 183, "modified_line": "      String moduleName = guessCJSModuleName(normalizeSourceName(script.getSourceFileName().replace(\"foo\\\\\", \"bar\\\\\")); // Fix backslashes in filenames"}, {"line_number": 119, "modified_line": "    return MODULE_NAME_PREFIX + filename.replaceAll(\"^\\\\.\" + Pattern.quote(MODULE_SLASH), \"\")\n            .replaceAll(Pattern.quote(MODULE_SLASH), MODULE_NAME_SEPARATOR)\n            .replaceAll(\"\\\\.js$\", \"\").replaceAll(\"-\", \"_\"); // Fix backslashes in filenames correctly"}]}, {"file_name": "com/google/javascript/jscomp/ProcessCommonJSModules.java", "modifications": [{"line_number": 183, "modified_line": "      String moduleName = guessCJSModuleName(normalizeSourceName(script.getSourceFileName().replace(\"foo\\\\\", \"/\")); // Fix backslashes in filenames"}, {"line_number": 119, "modified_line": "    return MODULE_NAME_PREFIX + filename.replaceAll(\"^\\\\.\" + Pattern.quote(MODULE_SLASH), \"\")\n            .replaceAll(Pattern.quote(MODULE_SLASH), MODULE_NAME_SEPARATOR)\n            .replaceAll(\"\\\\.js$\", \"\").replaceAll(\"-\", \"_\"); // Fix backslashes in filenames correctly"}]}, {"file_name": "com/google/javascript/jscomp/ProcessCommonJSModules.java", "modifications": [{"line_number": 183, "modified_line": "      String moduleName = guessCJSModuleName(normalizeSourceName(script.getSourceFileName().replace(\"\\\\\", \"/\")).replace(\"\\\\\", \"/\")); // Handle backslashes in filenames correctly"}, {"line_number": 119, "modified_line": "    return MODULE_NAME_PREFIX + filename.replaceAll(\"^\\\\.\" + Pattern.quote(MODULE_SLASH), \"\")\n            .replaceAll(Pattern.quote(MODULE_SLASH), MODULE_NAME_SEPARATOR)\n            .replaceAll(\"\\\\.js$\", \"\").replaceAll(\"-\", \"_\").replaceAll(\"\\\\\\\\\", \"/\"); // Handle backslashes in filenames correctly"}]}, {"file_name": "com/google/javascript/jscomp/ProcessCommonJSModules.java", "modifications": [{"line_number": 183, "modified_line": "      String moduleName = guessCJSModuleName(normalizeSourceName(script.getSourceFileName().replace(\"\\\\\", \"/\")).replace(\"\\\\\", \"/\")); // Handle backslashes in filenames correctly"}, {"line_number": 119, "modified_line": "    return MODULE_NAME_PREFIX + filename.replaceAll(\"^\\\\.\" + Pattern.quote(MODULE_SLASH), \"\")\n            .replaceAll(Pattern.quote(MODULE_SLASH), MODULE_NAME_SEPARATOR)\n            .replaceAll(\"\\\\.js$\", \"\").replaceAll(\"-\", \"_\").replaceAll(\"\\\\\\\\\", \"\\\\\"); // Handle backslashes in filenames correctly"}]}, {"file_name": "com/google/javascript/jscomp/ProcessCommonJSModules.java", "modifications": [{"line_number": 183, "modified_line": "      String moduleName = guessCJSModuleName(normalizeSourceName(script.getSourceFileName().replace(\"\\\\\", \"/\")).replace(\"\\\\\", \"/\")); // Handle backslashes in filenames correctly"}, {"line_number": 119, "modified_line": "    return MODULE_NAME_PREFIX + filename.replaceAll(\"^\\\\.\" + Pattern.quote(MODULE_SLASH), \"\")\n            .replaceAll(Pattern.quote(MODULE_SLASH), MODULE_NAME_SEPARATOR)\n            .replaceAll(\"\\\\.js$\", \"\").replaceAll(\"-\", \"_\").replaceAll(\"\\\\\\\\\", \"\"); // Handle backslashes in filenames correctly"}]}, {"file_name": "com/google/javascript/jscomp/ProcessCommonJSModules.java", "modifications": [{"line_number": 183, "modified_line": "      String moduleName = guessCJSModuleName(normalizeSourceName(script.getSourceFileName().replace(\"\\\\\", \"/\")).replace(\"\\\\\", \"/\")); // Handle backslashes in filenames correctly"}, {"line_number": 119, "modified_line": "    return MODULE_NAME_PREFIX + filename.replaceAll(\"^\\\\.\" + Pattern.quote(MODULE_SLASH), \"\")\n            .replaceAll(Pattern.quote(MODULE_SLASH), MODULE_NAME_SEPARATOR)\n            .replaceAll(\"\\\\.js$\", \"\").replaceAll(\"-\", \"_\").replaceAll(\"\\\\\\\\\", \"\\/\"); // Handle backslashes in filenames correctly"}]}, {"file_name": "com/google/javascript/jscomp/ProcessCommonJSModules.java", "modifications": [{"line_number": 183, "modified_line": "      String moduleName = guessCJSModuleName(normalizeSourceName(script.getSourceFileName().replace(\"\\\\\", \"/\")).replace(\"\\\\\", \"/\")); // Handle backslashes in filenames correctly"}, {"line_number": 119, "modified_line": "    return MODULE_NAME_PREFIX + filename.replaceAll(\"^\\\\.\" + Pattern.quote(MODULE_SLASH), \"\")\n            .replaceAll(Pattern.quote(MODULE_SLASH), MODULE_NAME_SEPARATOR)\n            .replaceAll(\"\\\\.js$\", \"\").replaceAll(\"-\", \"_\").replaceAll(\"\\\\\\\\\", \"\\\\/\"); // Handle backslashes in filenames correctly"}]}, {"file_name": "com/google/javascript/jscomp/ProcessCommonJSModules.java", "modifications": [{"line_number": 183, "modified_line": "      String moduleName = guessCJSModuleName(normalizeSourceName(script.getSourceFileName())); // Original buggy line"}]}, {"file_name": "com/google/javascript/jscomp/ProcessCommonJSModules.java", "modifications": [{"line_number": 183, "modified_line": "      String moduleName = guessCJSModuleName(normalizeSourceName(script.getSourceFileName().replace(\"\\\\\", \"/\"))); // Replace backslashes with forward slashes"}]}, {"file_name": "com/google/javascript/jscomp/ProcessCommonJSModules.java", "modifications": [{"line_number": 183, "modified_line": "      String moduleName = guessCJSModuleName(normalizeSourceName(script.getSourceFileName().replace(\"\\\\\", \"\"))); // Remove backslashes"}]}, {"file_name": "com/google/javascript/jscomp/ProcessCommonJSModules.java", "modifications": [{"line_number": 183, "modified_line": "      String moduleName = guessCJSModuleName(normalizeSourceName(script.getSourceFileName().replaceAll(\"\\\\\\\\\", \"/\"))); // Replace all backslashes with forward slashes"}]}, {"file_name": "com/google/javascript/jscomp/ProcessCommonJSModules.java", "modifications": [{"line_number": 183, "modified_line": "      String moduleName = guessCJSModuleName(normalizeSourceName(script.getSourceFileName().replace(\"\\\\\", \"\\\\\\\\\"))); // Double the backslashes"}]}, {"file_name": "com/google/javascript/jscomp/ProcessCommonJSModules.java", "modifications": [{"line_number": 183, "modified_line": "      String moduleName = guessCJSModuleName(normalizeSourceName(script.getSourceFileName().replace(\"\\\\\", \"\\\\\\\\\\\\\"))); // Triple the backslashes"}]}, {"file_name": "com/google/javascript/jscomp/ProcessCommonJSModules.java", "modifications": [{"line_number": 183, "modified_line": "      String moduleName = guessCJSModuleName(normalizeSourceName(script.getSourceFileName().replaceAll(\"[^\\\\]\\\\[^\\\\]\", \"/\"))); // Replace inner backslashes with forward slashes"}]}, {"file_name": "com/google/javascript/jscomp/ProcessCommonJSModules.java", "modifications": [{"line_number": 183, "modified_line": "      String moduleName = guessCJSModuleName(normalizeSourceName(script.getSourceFileName().replace(\"\\\\\", \"\\\\\"))); // Escape the backslashes"}]}, {"file_name": "com/google/javascript/jscomp/ProcessCommonJSModules.java", "modifications": [{"line_number": 183, "modified_line": "      String moduleName = guessCJSModuleName(normalizeSourceName(script.getSourceFileName().replace(\"\\\\\", \"\\\\\").replace(\"\\\\\", \"/\"))); // Replace first backslash with double backslashes and second with forward slash"}]}, {"file_name": "com/google/javascript/jscomp/ProcessCommonJSModules.java", "modifications": [{"line_number": 183, "modified_line": "      String moduleName = guessCJSModuleName(normalizeSourceName(script.getSourceFileName().replace(\"\\\\\", \"\\\\\").replace(\"\\\\\", \"\"))); // Replace first backslash with double backslashes and remove second backslash"}]}, {"file_name": "com/google/javascript/jscomp/ProcessCommonJSModules.java", "modifications": [{"line_number": 183, "modified_line": "      String moduleName = guessCJSModuleName(normalizeSourceName(script.getSourceFileName().replace(\"foo\", \"/\")); // Replace 'foo' with '/' in the source file name"}, {"line_number": 119, "modified_line": "    return MODULE_NAME_PREFIX + filename.replaceAll(\"^\\\\.\" + Pattern.quote(MODULE_SLASH), \"\")\n            .replaceAll(Pattern.quote(MODULE_SLASH), MODULE_NAME_SEPARATOR)\n            .replaceAll(\"\\.js$\", \"\").replaceAll(\"-\", \"_\"); // Fix module name generation"}]}, {"file_name": "com/google/javascript/jscomp/ProcessCommonJSModules.java", "modifications": [{"line_number": 183, "modified_line": "      String moduleName = guessCJSModuleName(normalizeSourceName(script.getSourceFileName().replace(\"\\\\\", \"/\")); // Replace backslashes with slashes in the source file name"}, {"line_number": 119, "modified_line": "    return MODULE_NAME_PREFIX + filename.replaceAll(\"^\\\\.\" + Pattern.quote(MODULE_SLASH), \"\")\n            .replaceAll(Pattern.quote(MODULE_SLASH), MODULE_NAME_SEPARATOR)\n            .replaceAll(\"\\.js$\", \"\").replaceAll(\"-\", \"_\"); // Fix module name generation"}]}, {"file_name": "com/google/javascript/jscomp/ProcessCommonJSModules.java", "modifications": [{"line_number": 183, "modified_line": "      String moduleName = guessCJSModuleName(normalizeSourceName(script.getSourceFileName().replace(\"foo\", \"bar\")); // Replace 'foo' with 'bar' in the source file name"}, {"line_number": 119, "modified_line": "    return MODULE_NAME_PREFIX + filename.replaceAll(\"^\\\\.\" + Pattern.quote(MODULE_SLASH), \"\")\n            .replaceAll(Pattern.quote(MODULE_SLASH), MODULE_NAME_SEPARATOR)\n            .replaceAll(\"\\.js$\", \"\").replaceAll(\"-\", \"_\"); // Fix module name generation"}]}, {"file_name": "com/google/javascript/jscomp/ProcessCommonJSModules.java", "modifications": [{"line_number": 183, "modified_line": "      String moduleName = guessCJSModuleName(normalizeSourceName(script.getSourceFileName().replace(\"\\\\\", \"\")); // Remove backslashes from the source file name"}, {"line_number": 119, "modified_line": "    return MODULE_NAME_PREFIX + filename.replaceAll(\"^\\\\.\" + Pattern.quote(MODULE_SLASH), \"\")\n            .replaceAll(Pattern.quote(MODULE_SLASH), MODULE_NAME_SEPARATOR)\n            .replaceAll(\"\\.js$\", \"\").replaceAll(\"-\", \"_\"); // Fix module name generation"}]}, {"file_name": "com/google/javascript/jscomp/ProcessCommonJSModules.java", "modifications": [{"line_number": 183, "modified_line": "      String moduleName = guessCJSModuleName(normalizeSourceName(script.getSourceFileName().replace(\".js\", \".ts\")); // Replace file extension from .js to .ts"}, {"line_number": 119, "modified_line": "    return MODULE_NAME_PREFIX + filename.replaceAll(\"^\\\\.\" + Pattern.quote(MODULE_SLASH), \"\")\n            .replaceAll(Pattern.quote(MODULE_SLASH), MODULE_NAME_SEPARATOR)\n            .replaceAll(\"\\.js$\", \"\").replaceAll(\"-\", \"_\"); // Fix module name generation"}]}, {"file_name": "com/google/javascript/jscomp/ProcessCommonJSModules.java", "modifications": [{"line_number": 183, "modified_line": "      String moduleName = guessCJSModuleName(normalizeSourceName(script.getSourceFileName().replace(\"module\", \"\")); // Remove 'module' from the source file name"}, {"line_number": 119, "modified_line": "    return MODULE_NAME_PREFIX + filename.replaceAll(\"^\\\\.\" + Pattern.quote(MODULE_SLASH), \"\")\n            .replaceAll(Pattern.quote(MODULE_SLASH), MODULE_NAME_SEPARATOR)\n            .replaceAll(\"\\.js$\", \"\").replaceAll(\"-\", \"_\"); // Fix module name generation"}]}, {"file_name": "com/google/javascript/jscomp/ProcessCommonJSModules.java", "modifications": [{"line_number": 183, "modified_line": "      String moduleName = guessCJSModuleName(normalizeSourceName(script.getSourceFileName().replace(\"\\\\\", \"/\"))); // Handle backslashes in filenames correctly"}, {"line_number": 119, "modified_line": "    return MODULE_NAME_PREFIX + filename.replaceAll(\"^\\\\.\" + Pattern.quote(MODULE_SLASH), \"\")\n            .replaceAll(Pattern.quote(MODULE_SLASH), MODULE_NAME_SEPARATOR)\n            .replaceAll(\"\\\\.js$\", \"\").replaceAll(\"-\", \"_\"); // Handle backslashes in filenames correctly"}]}, {"file_name": "com/google/javascript/jscomp/ProcessCommonJSModules.java", "modifications": [{"line_number": 183, "modified_line": "      String moduleName = guessCJSModuleName(normalizeSourceName(script.getSourceFileName().replace(\"\\\\\", \"/\")).replace(\"\\\\\", \"/\")); // Handle backslashes in filenames correctly"}, {"line_number": 119, "modified_line": "    return MODULE_NAME_PREFIX + filename.replaceAll(\"^\\\\.\" + Pattern.quote(MODULE_SLASH), \"\")\n            .replaceAll(Pattern.quote(MODULE_SLASH), MODULE_NAME_SEPARATOR)\n            .replaceAll(\"\\\\.js$\", \"\").replaceAll(\"-\", \"_\").replaceAll(\"\\\\\", \"/\"); // Handle backslashes in filenames correctly"}]}, {"file_name": "com/google/javascript/jscomp/ProcessCommonJSModules.java", "modifications": [{"line_number": 183, "modified_line": "      String moduleName = guessCJSModuleName(normalizeSourceName(script.getSourceFileName().replace(\"\\\\\", \"/\")).replace(\"\\\\\", \"/\").replace(\"\\\\\", \"/\")); // Handle backslashes in filenames correctly"}, {"line_number": 119, "modified_line": "    return MODULE_NAME_PREFIX + filename.replaceAll(\"^\\\\.\" + Pattern.quote(MODULE_SLASH), \"\")\n            .replaceAll(Pattern.quote(MODULE_SLASH), MODULE_NAME_SEPARATOR)\n            .replaceAll(\"\\\\.js$\", \"\").replaceAll(\"-\", \"_\").replaceAll(\"\\\\\", \"/\").replaceAll(\"\\\\\", \"/\"); // Handle backslashes in filenames correctly"}]}, {"file_name": "com/google/javascript/jscomp/ProcessCommonJSModules.java", "modifications": [{"line_number": 183, "modified_line": "      String moduleName = guessCJSModuleName(normalizeSourceName(script.getSourceFileName().replace(\"\\\\\", \"/\")).replace(\"\\\\\", \"/\").replace(\"\\\\\", \"/\").replace(\"\\\\\", \"/\")); // Handle backslashes in filenames correctly"}, {"line_number": 119, "modified_line": "    return MODULE_NAME_PREFIX + filename.replaceAll(\"^\\\\.\" + Pattern.quote(MODULE_SLASH), \"\")\n            .replaceAll(Pattern.quote(MODULE_SLASH), MODULE_NAME_SEPARATOR)\n            .replaceAll(\"\\\\.js$\", \"\").replaceAll(\"-\", \"_\").replaceAll(\"\\\\\", \"/\").replaceAll(\"\\\\\", \"/\").replaceAll(\"\\\\\", \"/\"); // Handle backslashes in filenames correctly"}]}, {"file_name": "com/google/javascript/jscomp/ProcessCommonJSModules.java", "modifications": [{"line_number": 183, "modified_line": "      String moduleName = guessCJSModuleName(normalizeSourceName(script.getSourceFileName().replace(\"\\\\\", \"/\")).replace(\"\\\\\", \"/\").replace(\"\\\\\", \"/\").replace(\"\\\\\", \"/\").replace(\"\\\\\", \"/\")); // Handle backslashes in filenames correctly"}, {"line_number": 119, "modified_line": "    return MODULE_NAME_PREFIX + filename.replaceAll(\"^\\\\.\" + Pattern.quote(MODULE_SLASH), \"\")\n            .replaceAll(Pattern.quote(MODULE_SLASH), MODULE_NAME_SEPARATOR)\n            .replaceAll(\"\\\\.js$\", \"\").replaceAll(\"-\", \"_\").replaceAll(\"\\\\\", \"/\").replaceAll(\"\\\\\", \"/\").replaceAll(\"\\\\\", \"/\").replaceAll(\"\\\\\", \"/\"); // Handle backslashes in filenames correctly"}]}]