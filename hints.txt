- Hint 1: Think of mutating comparision operators in a condition, e.g, < to >= and == to !=... Consider all possibilities and combinations even == to >, != to <= ...for example.
    Original: if x < 10:
    Fix: if x >= 10:
- Hint 2: Think of replacing variables with explicit values (when possible)
    Original: result = add(x, y)
    Fix: result = add(5, 8)
    
    Original: x = y + 1
    Fix:  x = 1
- Hint 3: Consider changing some tokens partially, e.g, allXXX to anyXXX and minXXX to maxXXX startXXX to endXXX, vice versa and so on... (consider all possibilities)
    Original: all_elements_valid = True
    Fix: any_elements_valid = True
- Hint 4: Think of making conditions more complex (by adding 'and' / 'or' operators and the corresponding part) or less complex (by removing some of 'and'/ 'or' parts)
    Original: if (x > 0 and y < 5):
    More complex condition: if (x > 0 and y < 5 and z == 10):
    Less complex condition: if (x > 0):
- Hint 5: if my patch consist only of adding a comment or modifying a line into a comment, you should discard my patch and try to suggest mutation of the buggy line(s) of code instead
    Orginal: '// Modify the logic for finding wrap position and padding text here to address the bug'
    Fix: pos = findWrapPos(text, width, 0);
- Hint 6: in some cases you will be required to insert new lines of code. For example when the info about the bug mention "# insert new line(s) to fix the bug", you should consider adding more lines at the given location. Usually, the code around the insertion location give you an idea about the lines to insert. Also the type of assertion failure.
    Example:
     if (!Double.isNaN(v)) {
        min = Math.min(minimum, v);
+       max = Math.max(maximum, v); // insertion happened here
        }
    if (!Double.isNaN(u)) {
+       minimum = Math.min(min, u);// insertion happened here
        maximum = Math.max(max, u); 
        }
- Hint 7: pay attention to the comments and doc string above the buggy code, specifically if any important comments exist above or next to buggy lines.
    Example:
    // - verify the header checksum
    This comment indicates that a verification of the header checksum, which can be done by calling a method dedicated for that.
- Hint 8: the usual fix of some null pointer exceptions is to add a condition on the variable(s) that can be null.
    Original: entity.create()
    Fix: if (entity != null){
        entity.create()
    }
- Hint 9: Do not modify a file by replacing with a comment. If you want to delete a line you can add its number to the list of lines to delete.
Always suggest code and not comments only.
Example of forbiden fix because it only writes a comment and not actual code:
    {
        modifications: [{"line_number": 105, "modified_line": "// need to improve this code"}]
    }
- Hint 10: Pay attention the type of variables. The code before and after the buggy lines might give hints of what the type of a variable should be.
Example: 
    int x = 20;
    double y = x * x; // x should have been declared as double in the previous line
- Hint 11: You also should be careful with types in java, especially numerical types.
For example int * int might produce a double which means it should be stored in double variable
Another example is int + int would also produce double.

- Hint 12: If the buggy lines a method signature, consider changing the signature of the method. Also, consider checking similar methods or neighbors methods by searching the code base.
Examples:
    change private to public or protected and vice-versa
    change the type of an argument
    add or remove an argument